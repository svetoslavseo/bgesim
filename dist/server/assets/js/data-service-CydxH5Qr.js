class s{constructor(){this.plans={items:[]},this.isLoaded=!1,this.loadPromise=null,this.init()}static getInstance(){return s.instance||(s.instance=new s),s.instance}init(){typeof window<"u"&&window.__PRELOADED_PLANS__&&(this.plans=window.__PRELOADED_PLANS__,this.isLoaded=!0,console.log("DataService: Initialized with pre-loaded SSR data."))}async fetchPlansData(){if(typeof window>"u")return globalThis.plansData?(console.log("DataService: Using pre-loaded data from globalThis in SSR."),globalThis.plansData):(console.error("DataService: plansData not found on globalThis in SSR!"),{items:[]});console.log("DataService: Fetching plans data on client...");try{const t=await fetch("/plans.json");if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const a=await t.json();return console.log(`DataService: Fetched ${a.items?.length||0} plans on client.`),a}catch(t){return console.error("DataService: Failed to fetch plans.json on client.",t),{items:[]}}}async getPlansData(t=!1){return this.isLoaded&&!t?this.plans:((!this.loadPromise||t)&&(this.loadPromise=this.fetchPlansData().then(a=>{a&&Array.isArray(a.items)?this.plans=a:(console.warn("DataService: Fetched data is invalid, falling back to empty array."),this.plans={items:[]}),this.isLoaded=!0,this.loadPromise=null}).catch(a=>{console.error("DataService: Error in getPlansData.",a),this.plans={items:[]},this.isLoaded=!0,this.loadPromise=null})),await this.loadPromise,this.plans)}}const e=s.getInstance();export{e as dataService};
